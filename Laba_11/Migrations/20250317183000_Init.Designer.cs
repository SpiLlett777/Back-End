// <auto-generated />
using Laba_11.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Laba_11.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250317183000_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Laba_11.Models.Bird", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision");

                    b.Property<double>("Wingspan")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.ToTable("Birds");
                });

            modelBuilder.Entity("Laba_11.Models.BirdEcologicalNiche", b =>
                {
                    b.Property<int>("BirdId")
                        .HasColumnType("integer");

                    b.Property<int>("EcologicalNicheId")
                        .HasColumnType("integer");

                    b.HasKey("BirdId", "EcologicalNicheId");

                    b.HasIndex("EcologicalNicheId");

                    b.ToTable("BirdEcologicalNiches");
                });

            modelBuilder.Entity("Laba_11.Models.EcologicalNiche", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("EcologicalNiches");
                });

            modelBuilder.Entity("Laba_11.Models.BirdEcologicalNiche", b =>
                {
                    b.HasOne("Laba_11.Models.Bird", "Bird")
                        .WithMany("BirdEcologicalNiches")
                        .HasForeignKey("BirdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Laba_11.Models.EcologicalNiche", "EcologicalNiche")
                        .WithMany("BirdEcologicalNiches")
                        .HasForeignKey("EcologicalNicheId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bird");

                    b.Navigation("EcologicalNiche");
                });

            modelBuilder.Entity("Laba_11.Models.Bird", b =>
                {
                    b.Navigation("BirdEcologicalNiches");
                });

            modelBuilder.Entity("Laba_11.Models.EcologicalNiche", b =>
                {
                    b.Navigation("BirdEcologicalNiches");
                });
#pragma warning restore 612, 618
        }
    }
}
